üî¥ PROBLEMA 1: Errore in AccountRepository
ERRORE:
No property 'email' found for type 'Account'; Did you mean 'mail'
CAUSA:

Nel AccountRepository era presente il metodo: existsByEmailIgnoreCase(String email)

Ma nell'entit√† Account il campo si chiama: private String mail

Spring Data JPA cerca di creare query automatiche basate sul nome del metodo, ma non trovava il campo email

SOLUZIONE:

java
// ‚ùå VECCHIO (causava errore):
boolean existsByEmailIgnoreCase(String email);

// ‚úÖ NUOVO (corretto):
boolean existsByMailIgnoreCase(String mail);


üî¥ PROBLEMA 2: Chiamata errata nel Service
ERRORE: L'errore si propagava al service che chiamava il metodo sbagliato

CAUSA:

AccountServiceImpl chiamava ancora existsByEmailIgnoreCase dopo che l'avevamo rimosso dal repository

SOLUZIONE:

java
// ‚ùå VECCHIO:
if(accountRepository.existsByEmailIgnoreCase(request.getMail()))

// ‚úÖ NUOVO:
if(accountRepository.existsByMailIgnoreCase(request.getMail()))


üî¥ PROBLEMA 3: Errore in UtenteRepository
ERRORE:
No property 'email' found for type 'Utente'
CAUSA:

UtenteRepository aveva: boolean existsByEmail(String email)

Ma l'entit√† Utente non aveva il campo email - l'email era nell'entit√† Account tramite relazione

SOLUZIONE:

java
// ‚ùå ELIMINATO (non serviva):
boolean existsByEmail(String email);
üî¥ PROBLEMA 4: Errore in OffertaRepository
ERRORE:

text
No property 'idImmobile' found for type 'Offerta'; Did you mean 'immobile'
CAUSA:

OffertaRepository aveva: List<Offerta> findByidImmobile(Long idImmobile)

Ma nell'entit√† Offerta c'era una relazione: private Immobile immobile (oggetto, non ID diretto)

SOLUZIONE:

java
// ‚ùå VECCHIO:
List<Offerta> findByidImmobile(Long idImmobile);

// ‚úÖ NUOVO:
List<Offerta> findByImmobileIdImmobile(Long idImmobile);